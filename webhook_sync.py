import json
import logging
import time
from datetime import datetime
from typing import List
from database import get_session_local, WebhookState, TrackedAccount
from neynar_client import get_neynar_client
from config import config

logger = logging.getLogger(__name__)

def build_webhook_url(base_url: str, endpoint: str = "webhooks/neynar") -> str:
    """Construire une URL de webhook sans double slash"""
    # Supprimer les slashes en fin de base_url
    base_url = base_url.rstrip('/')
    # Supprimer les slashes en d√©but d'endpoint
    endpoint = endpoint.lstrip('/')
    # Construire l'URL proprement
    return f"{base_url}/{endpoint}"

def sync_neynar_webhook():
    """Synchroniser le webhook Neynar avec les FIDs suivis selon la documentation officielle"""
    try:
        logger.info("D√©but de la synchronisation du webhook Neynar...")
        
        # V√©rifier que le client Neynar est disponible
        if not get_neynar_client() or not hasattr(get_neynar_client(), 'create_webhook'):
            logger.error("Client Neynar non disponible ou invalide")
            return
        
        # R√©cup√©rer tous les FIDs suivis (toutes guilds confondues)
        db = get_session_local()()
        try:
            tracked_accounts = db.query(TrackedAccount.fid).distinct().all()
            all_fids = [int(account[0]) for account in tracked_accounts]  # S'assurer que ce sont des entiers
            
            logger.info(f"FIDs collect√©s pour le tracking: {len(all_fids)} - {all_fids}")
            
            # R√©cup√©rer l'√©tat actuel du webhook
            webhook_state = db.query(WebhookState).filter_by(id="singleton").first()
            
            if not webhook_state:
                # FORCER L'UTILISATION DU WEBHOOK CONFIGUR√â
                webhook_id = config.NEYNAR_WEBHOOK_ID
                logger.info(f"üîí Aucun √©tat de webhook trouv√©, utilisation FORC√âE du webhook {webhook_id}")
                
                # Cr√©er l'√©tat local avec le webhook configur√©
                webhook_state = WebhookState(
                    id="singleton",
                    webhook_id=webhook_id,
                    active=True,
                    author_fids=json.dumps(all_fids)
                )
                db.add(webhook_state)
                db.commit()
                
                logger.info(f"‚úÖ √âtat local cr√©√© avec le webhook {webhook_id}")
                
                # Mettre √† jour le webhook existant avec les FIDs actuels
                try:
                    updated_webhook = get_neynar_client().update_webhook(
                        webhook_id,
                        all_fids
                    )
                    logger.info(f"‚úÖ Webhook existant {webhook_id} mis √† jour avec les FIDs actuels")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Impossible de mettre √† jour le webhook existant: {e}")
                    logger.warning("‚ö†Ô∏è Mais l'√©tat local est cr√©√© et le webhook sera utilis√©")
                    
            else:
                # V√©rifier si la liste des FIDs a chang√©
                current_fids = json.loads(webhook_state.author_fids)
                current_fids.sort()
                new_fids = sorted(all_fids)
                
                # FORCER L'UTILISATION DU WEBHOOK CONFIGUR√â
                webhook_id = config.NEYNAR_WEBHOOK_ID
                if webhook_state.webhook_id != webhook_id:
                    logger.warning(f"üîí Webhook ID diff√©rent du webhook configur√©, FORCAGE de l'utilisation du webhook {webhook_id}")
                    webhook_state.webhook_id = webhook_id
                    db.commit()
                    logger.info(f"‚úÖ Webhook ID forc√© sur {webhook_id}")
                
                # V√©rifier l'√©tat du webhook configur√© c√¥t√© Neynar
                try:
                    webhook_details = get_neynar_client().get_webhook(webhook_id)
                    if not webhook_details or not webhook_details.get("active"):
                        logger.warning(f"‚ö†Ô∏è Webhook {webhook_id} inactif c√¥t√© Neynar, tentative de r√©activation...")
                        try:
                            # R√©activer le webhook configur√© avec les FIDs actuels
                            reactivated_webhook = get_neynar_client().update_webhook(
                                webhook_id,
                                all_fids
                            )
                            logger.info(f"‚úÖ Webhook {webhook_id} r√©activ√©")
                            # Mettre √† jour l'√©tat local
                            webhook_state.author_fids = json.dumps(all_fids)
                            webhook_state.updated_at = datetime.utcnow()
                            db.commit()
                        except Exception as reactivate_error:
                            logger.error(f"‚ùå Impossible de r√©activer le webhook {webhook_id}: {reactivate_error}")
                            logger.warning("‚ö†Ô∏è Mais on continue avec l'√©tat local existant")
                    else:
                        logger.info(f"‚úÖ Webhook {webhook_id} actif et accessible")
                except Exception as check_error:
                    logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier l'√©tat du webhook {webhook_id}: {check_error}")
                    logger.warning("‚ö†Ô∏è Mais on continue avec l'√©tat local existant")
                
                if current_fids != new_fids:
                    logger.info(f"FIDs modifi√©s, mise √† jour du webhook... Anciens: {current_fids}, Nouveaux: {new_fids}")
                    
                    try:
                        # Mettre √† jour le webhook configur√©
                        updated_webhook = get_neynar_client().update_webhook(
                            webhook_id,
                            all_fids
                        )
                        
                        # Mettre √† jour l'√©tat en base
                        webhook_state.author_fids = json.dumps(all_fids)
                        webhook_state.updated_at = datetime.utcnow()
                        db.commit()
                        
                        logger.info(f"‚úÖ Webhook {webhook_id} mis √† jour avec succ√®s")
                        
                    except Exception as e:
                        logger.error(f"Erreur lors de la mise √† jour du webhook: {e}")
                        # STRAT√âGIE CONSERVATIVE : Ne JAMAIS recr√©er le webhook
                        # Si erreur, on garde l'ancien √©tat et on log l'erreur
                        error_message = str(e).lower()
                        if "404" in error_message or "not found" in error_message:
                            logger.warning("‚ö†Ô∏è Webhook introuvable c√¥t√© Neynar, mais on NE LE RECR√âE PAS")
                            logger.warning("‚ö†Ô∏è On garde l'√©tat local pour √©viter la perte de connexion")
                            logger.warning("‚ö†Ô∏è Le webhook sera r√©cup√©r√© au prochain red√©marrage du bot")
                            # On ne fait RIEN, on garde l'√©tat local
                        else:
                            logger.warning("‚ö†Ô∏è Erreur de mise √† jour, mais on garde l'√©tat existant")
                            # On ne fait RIEN, on garde l'√©tat local
                else:
                    logger.info("Aucun changement de FIDs d√©tect√©, webhook √† jour")
            
            logger.info("Synchronisation du webhook Neynar termin√©e avec succ√®s")
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"√âchec de la synchronisation du webhook Neynar: {e}")
        # Ne pas lever l'exception, juste logger l'erreur
        return

def get_webhook_state():
    """R√©cup√©rer l'√©tat actuel du webhook"""
    db = get_session_local()()
    try:
        return db.query(WebhookState).filter_by(id="singleton").first()
    finally:
        db.close()

def cleanup_webhook():
    """Nettoyer le webhook Neynar selon la documentation officielle"""
    try:
        webhook_state = get_webhook_state()
        if webhook_state:
            # EMP√äCHER LA SUPPRESSION DU WEBHOOK FIXE
            if webhook_state.webhook_id == "01K45KREDQ77B80YD87AAXJ3E8":
                logger.warning("üîí TENTATIVE DE SUPPRESSION DU WEBHOOK FIXE BLOQU√âE")
                logger.warning("üîí Le webhook 01K45KREDQ77B80YD87AAXJ3E8 ne peut pas √™tre supprim√©")
                return
            
            try:
                get_neynar_client().delete_webhook(webhook_state.webhook_id)
                logger.info(f"Webhook Neynar {webhook_state.webhook_id} supprim√©")
                
                db = get_session_local()()
                try:
                    db.delete(webhook_state)
                    db.commit()
                    logger.info("√âtat du webhook supprim√© de la base de donn√©es")
                finally:
                    db.close()
                    
            except Exception as e:
                logger.error(f"Erreur lors de la suppression du webhook: {e}")
                raise
                
    except Exception as e:
        logger.error(f"Erreur lors du nettoyage du webhook: {e}")

def test_webhook_connection():
    """Tester la connexion au webhook Neynar selon la documentation officielle"""
    try:
        webhook_state = get_webhook_state()
        if not webhook_state:
            logger.info("Aucun webhook configur√©")
            return False
        
        # Tester la r√©cup√©ration des d√©tails du webhook fixe
        webhook_details = get_neynar_client().get_webhook("01K45KREDQ77B80YD87AAXJ3E8")  # WEBHOOK FIXE
        
        if webhook_details.get("active"):
            logger.info("‚úÖ Webhook fixe 01K45KREDQ77B80YD87AAXJ3E8 actif et accessible")
            return True
        else:
            logger.warning("‚ö†Ô∏è Webhook fixe 01K45KREDQ77B80YD87AAXJ3E8 inactif")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion au webhook: {e}")
        return False

def get_webhook_stats():
    """R√©cup√©rer les statistiques du webhook Neynar"""
    try:
        logger.info("üîß Tentative de r√©cup√©ration des stats du webhook...")
        
        db = get_session_local()()
        try:
            webhook_state = db.query(WebhookState).filter_by(id="singleton").first()
            
            if not webhook_state:
                logger.info("üìù Aucun √©tat de webhook trouv√©")
                return {"status": "no_webhook", "message": "Aucun webhook configur√©"}
            
            logger.info(f"üîß √âtat du webhook trouv√©: {webhook_state.webhook_id}")
            
            client = get_neynar_client()
            logger.info(f"üîß Client Neynar r√©cup√©r√©: {client}")
            
            if client is None:
                logger.error("‚ùå Client Neynar est None - v√©rification de la configuration")
                return {"status": "error", "message": "Client Neynar non initialis√©"}
            
            logger.info(f"üîß Client Neynar valide: {type(client).__name__}")
            
            webhook_id = config.NEYNAR_WEBHOOK_ID
            webhook_details = client.get_webhook(webhook_id)
            logger.info(f"üîß D√©tails du webhook fixe r√©cup√©r√©s: {webhook_details}")
            
            if webhook_details.get("active"):
                return {
                    "status": "active",
                    "webhook_id": webhook_id,
                    "author_fids_count": len(json.loads(webhook_state.author_fids)),
                    "message": f"Webhook {webhook_id} actif"
                }
            else:
                return {
                    "status": "inactive",
                    "webhook_id": webhook_id,
                    "message": f"Webhook {webhook_id} inactif"
                }
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des stats: {e}")
        logger.error(f"‚ùå Type d'erreur: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return {"status": "error", "message": str(e)}

def force_webhook_fixe():
    """Forcer l'utilisation du webhook fixe 01K45KREDQ77B80YD87AAXJ3E8"""
    try:
        logger.info("üîí FORCAGE de l'utilisation du webhook fixe 01K45KREDQ77B80YD87AAXJ3E8")
        
        db = get_session_local()()
        try:
            # R√©cup√©rer ou cr√©er l'√©tat du webhook
            webhook_state = db.query(WebhookState).filter_by(id="singleton").first()
            
            if not webhook_state:
                # Cr√©er un nouvel √©tat avec le webhook fixe
                webhook_state = WebhookState(
                    id="singleton",
                    webhook_id="01K45KREDQ77B80YD87AAXJ3E8",  # WEBHOOK FIXE
                    active=True,
                    author_fids=json.dumps([])
                )
                db.add(webhook_state)
                logger.info("‚úÖ Nouvel √©tat cr√©√© avec le webhook fixe")
            else:
                # Forcer l'utilisation du webhook fixe
                if webhook_state.webhook_id != "01K45KREDQ77B80YD87AAXJ3E8":
                    logger.warning(f"üîí Webhook ID chang√© de {webhook_state.webhook_id} vers 01K45KREDQ77B80YD87AAXJ3E8")
                    webhook_state.webhook_id = "01K45KREDQ77B80YD87AAXJ3E8"
                else:
                    logger.info("‚úÖ Webhook ID d√©j√† correct: 01K45KREDQ77B80YD87AAXJ3E8")
            
            # R√©cup√©rer tous les FIDs track√©s
            tracked_accounts = db.query(TrackedAccount.fid).distinct().all()
            all_fids = [int(account[0]) for account in tracked_accounts]  # S'assurer que ce sont des entiers
            
            # Mettre √† jour l'√©tat local
            webhook_state.author_fids = json.dumps(all_fids)
            webhook_state.updated_at = datetime.utcnow()
            db.commit()
            
            logger.info(f"‚úÖ √âtat local synchronis√© avec {len(all_fids)} FID(s)")
            
            # V√âRIFIER D'ABORD SI LE WEBHOOK EXISTE ENCORE C√îT√â NEYNAR
            try:
                webhook_details = get_neynar_client().get_webhook("01K45KREDQ77B80YD87AAXJ3E8")
                if webhook_details and webhook_details.get("active"):
                    logger.info("‚úÖ Webhook fixe 01K45KREDQ77B80YD87AAXJ3E8 existe et est actif c√¥t√© Neynar")
                    
                    # Mettre √† jour le webhook c√¥t√© Neynar
                    try:
                        updated_webhook = get_neynar_client().update_webhook(
                            "01K45KREDQ77B80YD87AAXJ3E8",  # WEBHOOK FIXE
                            all_fids
                        )
                        logger.info("‚úÖ Webhook fixe 01K45KREDQ77B80YD87AAXJ3E8 mis √† jour c√¥t√© Neynar")
                        return True
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Impossible de mettre √† jour le webhook c√¥t√© Neynar: {e}")
                        logger.warning("‚ö†Ô∏è Mais l'√©tat local est synchronis√©")
                        return False
                else:
                    logger.warning(f"‚ö†Ô∏è Webhook {webhook_id} n'existe plus ou est inactif c√¥t√© Neynar")
                    logger.warning("‚ö†Ô∏è Il faut le recr√©er manuellement sur Neynar ou utiliser un autre webhook")
                    return False
                    
            except Exception as e:
                if "404" in str(e) or "not found" in str(e).lower():
                    logger.error(f"‚ùå Webhook {webhook_id} N'EXISTE PLUS c√¥t√© Neynar !")
                    logger.error("‚ùå Il faut le recr√©er manuellement sur Neynar ou utiliser un autre webhook")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier l'√©tat du webhook c√¥t√© Neynar: {e}")
                    logger.warning("‚ö†Ô∏è Mais l'√©tat local est synchronis√©")
                    return False
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du for√ßage du webhook fixe: {e}")
        return False

def add_fids_to_webhook(new_fids: List[str]):
    """Ajouter des FIDs au webhook existant SANS le recr√©er"""
    try:
        logger.info(f"üîß Tentative d'ajout de FIDs au webhook existant: {new_fids}")
        
        db = get_session_local()()
        try:
            webhook_state = db.query(WebhookState).filter_by(id="singleton").first()
            
            if not webhook_state:
                logger.warning("‚ö†Ô∏è Aucun webhook existant, impossible d'ajouter des FIDs")
                return False
            
            # R√©cup√©rer les FIDs actuels
            current_fids = json.loads(webhook_state.author_fids)
            # S'assurer que tous les FIDs sont des strings pour la coh√©rence
            current_fids = [str(fid) for fid in current_fids]
            logger.info(f"üîß FIDs actuels: {current_fids}")
            
            # Ajouter les nouveaux FIDs (sans doublons) - s'assurer qu'ils sont des strings
            new_fids_str = [str(fid) for fid in new_fids]
            updated_fids = list(set(current_fids + new_fids_str))
            logger.info(f"üîß FIDs mis √† jour: {updated_fids}")
            
            if updated_fids == current_fids:
                logger.info("‚úÖ Aucun nouveau FID √† ajouter")
                return True
            
            # V√âRIFIER D'ABORD SI LE WEBHOOK EXISTE ENCORE C√îT√â NEYNAR
            try:
                webhook_id = config.NEYNAR_WEBHOOK_ID
                webhook_details = get_neynar_client().get_webhook(webhook_id)
                if webhook_details and webhook_details.get("active"):
                    logger.info(f"‚úÖ Webhook {webhook_id} existe et est actif c√¥t√© Neynar")
                    
                    # Mettre √† jour le webhook configur√©
                    try:
                        # Convertir les FIDs en entiers pour l'API Neynar
                        updated_fids_int = [int(fid) for fid in updated_fids]
                        updated_webhook = get_neynar_client().update_webhook(
                            webhook_id,
                            updated_fids_int
                        )
                        
                        # Mettre √† jour l'√©tat local
                        webhook_state.author_fids = json.dumps(updated_fids)
                        webhook_state.updated_at = datetime.utcnow()
                        db.commit()
                        
                        logger.info(f"‚úÖ FIDs ajout√©s au webhook {webhook_id}")
                        return True
                        
                    except Exception as update_error:
                        logger.error(f"‚ùå Erreur lors de la mise √† jour du webhook: {update_error}")
                        logger.warning("‚ö†Ô∏è On garde l'√©tat local existant pour √©viter la perte de connexion")
                        return False
                        
                else:
                    logger.warning(f"‚ö†Ô∏è Webhook {webhook_id} n'existe plus ou est inactif c√¥t√© Neynar")
                    logger.warning("‚ö†Ô∏è Il faut le recr√©er manuellement sur Neynar ou utiliser un autre webhook")
                    return False
                    
            except Exception as e:
                if "404" in str(e) or "not found" in str(e).lower():
                    logger.error(f"‚ùå Webhook {webhook_id} N'EXISTE PLUS c√¥t√© Neynar !")
                    logger.error("‚ùå Il faut le recr√©er manuellement sur Neynar ou utiliser un autre webhook")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier l'√©tat du webhook c√¥t√© Neynar: {e}")
                    logger.warning("‚ö†Ô∏è Mais l'√©tat local est synchronis√©")
                    return False
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ajout des FIDs: {e}")
        return False

def remove_fids_from_webhook(fids_to_remove: List[str]):
    """Retirer des FIDs du webhook existant SANS le recr√©er"""
    try:
        logger.info(f"üîß Tentative de retrait de FIDs du webhook existant: {fids_to_remove}")
        
        db = get_session_local()()
        try:
            webhook_state = db.query(WebhookState).filter_by(id="singleton").first()
            
            if not webhook_state:
                logger.warning("‚ö†Ô∏è Aucun webhook existant, impossible de retirer des FIDs")
                return False
            
            # R√©cup√©rer les FIDs actuels
            current_fids = json.loads(webhook_state.author_fids)
            # S'assurer que tous les FIDs sont des strings pour la coh√©rence
            current_fids = [str(fid) for fid in current_fids]
            logger.info(f"üîß FIDs actuels: {current_fids}")
            
            # Retirer les FIDs sp√©cifi√©s - s'assurer qu'ils sont des strings
            fids_to_remove_str = [str(fid) for fid in fids_to_remove]
            updated_fids = [fid for fid in current_fids if fid not in fids_to_remove_str]
            logger.info(f"üîß FIDs mis √† jour: {updated_fids}")
            
            if updated_fids == current_fids:
                logger.info("‚úÖ Aucun FID √† retirer")
                return True
            
            # V√âRIFIER D'ABORD SI LE WEBHOOK EXISTE ENCORE C√îT√â NEYNAR
            try:
                webhook_id = config.NEYNAR_WEBHOOK_ID
                webhook_details = get_neynar_client().get_webhook(webhook_id)
                if webhook_details and webhook_details.get("active"):
                    logger.info(f"‚úÖ Webhook {webhook_id} existe et est actif c√¥t√© Neynar")
                    
                    # Mettre √† jour le webhook configur√©
                    try:
                        # Convertir les FIDs en entiers pour l'API Neynar
                        updated_fids_int = [int(fid) for fid in updated_fids]
                        updated_webhook = get_neynar_client().update_webhook(
                            webhook_id,
                            updated_fids_int
                        )
                        
                        # Mettre √† jour l'√©tat local
                        webhook_state.author_fids = json.dumps(updated_fids)
                        webhook_state.updated_at = datetime.utcnow()
                        db.commit()
                        
                        logger.info("‚úÖ FIDs retir√©s du webhook fixe 01K45KREDQ77B80YD87AAXJ3E8")
                        return True
                        
                    except Exception as update_error:
                        logger.error(f"‚ùå Erreur lors de la mise √† jour du webhook: {update_error}")
                        logger.warning("‚ö†Ô∏è On garde l'√©tat local existant pour √©viter la perte de connexion")
                        return False
                        
                else:
                    logger.warning(f"‚ö†Ô∏è Webhook {webhook_id} n'existe plus ou est inactif c√¥t√© Neynar")
                    logger.warning("‚ö†Ô∏è Il faut le recr√©er manuellement sur Neynar ou utiliser un autre webhook")
                    return False
                    
            except Exception as e:
                if "404" in str(e) or "not found" in str(e).lower():
                    logger.error(f"‚ùå Webhook {webhook_id} N'EXISTE PLUS c√¥t√© Neynar !")
                    logger.error("‚ùå Il faut le recr√©er manuellement sur Neynar ou utiliser un autre webhook")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier l'√©tat du webhook c√¥t√© Neynar: {e}")
                    logger.warning("‚ö†Ô∏è Mais l'√©tat local est synchronis√©")
                    return False
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du retrait des FIDs: {e}")
        return False
