import asyncio
import threading
import logging
import time
from config import config
from database import init_db, check_db_connection
from discord_bot import run_bot
from webhook_handler import app
import uvicorn

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_webhook_server():
    """Lancer le serveur webhook FastAPI dans un thread s√©par√©"""
    try:
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=config.PORT,
            log_level=config.LOG_LEVEL.lower()
        )
    except Exception as e:
        logger.error(f"Erreur lors du lancement du serveur webhook: {e}")

def main():
    """Fonction principale"""
    logger.info("üöÄ D√©marrage du Farcaster Tracker Bot...")
    
    # Valider la configuration
    if not config.validate():
        logger.error("‚ùå Configuration invalide, arr√™t du bot")
        return
    
    # V√©rifier que les variables essentielles sont pr√©sentes
    logger.info("üîß V√©rification de la configuration...")
    logger.info(f"Discord Token: {'‚úÖ Configur√©' if config.DISCORD_TOKEN else '‚ùå Manquant'}")
    logger.info(f"Neynar API Key: {'‚úÖ Configur√©' if config.NEYNAR_API_KEY else '‚ùå Manquant'}")
    logger.info(f"Database URL: {'‚úÖ Configur√©' if config.DATABASE_URL else '‚ùå Manquant'}")
    logger.info(f"Public Base URL: {'‚úÖ Configur√©' if config.PUBLIC_BASE_URL else '‚ùå Manquant'}")
    
    # Initialiser la base de donn√©es seulement si DATABASE_URL est configur√©
    if config.DATABASE_URL:
        try:
            logger.info("üóÑÔ∏è Initialisation de la base de donn√©es...")
            init_db()
            
            # V√©rifier la connexion
            if not check_db_connection():
                logger.error("‚ùå Impossible de se connecter √† la base de donn√©es")
                logger.warning("‚ö†Ô∏è Le bot continuera sans base de donn√©es (mode d√©grad√©)")
            else:
                logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation de la base: {e}")
            logger.warning("‚ö†Ô∏è Le bot continuera sans base de donn√©es (mode d√©grad√©)")
    else:
        logger.warning("‚ö†Ô∏è DATABASE_URL non configur√©, le bot fonctionnera en mode d√©grad√©")
    
    # Lancer le serveur webhook dans un thread s√©par√©
    logger.info(f"üåê Lancement du serveur webhook sur le port {config.PORT}...")
    webhook_thread = threading.Thread(target=run_webhook_server, daemon=True)
    webhook_thread.start()
    
    # Attendre un peu que le serveur d√©marre
    logger.info("‚è≥ Attente du d√©marrage du serveur webhook...")
    time.sleep(3)
    
    # Lancer le bot Discord
    logger.info("ü§ñ Lancement du bot Discord...")
    try:
        run_bot()
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du bot: {e}")
    finally:
        logger.info("üëã Arr√™t du Farcaster Tracker Bot")

if __name__ == "__main__":
    main()
