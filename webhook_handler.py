import asyncio
import hmac
import hashlib
import json
import logging
import uuid
from typing import Dict, Any, List
from fastapi import FastAPI, Request, HTTPException, Depends
from sqlalchemy.orm import Session
import discord
import discord.utils
from database import get_session_local, Delivery
from config import config

# Configuration du logging
logger = logging.getLogger(__name__)

# Cr√©er l'application FastAPI
app = FastAPI(title="Farcaster Tracker Webhook Handler")

# Queue pour les messages Discord
import queue
import threading
import time

discord_queue = queue.Queue()
worker_thread = None
worker_running = False

def discord_worker():
    """Worker thread pour envoyer les messages Discord de mani√®re synchrone"""
    global worker_running
    worker_running = True
    
    while worker_running:
        try:
            # R√©cup√©rer un message de la queue
            message_data = discord_queue.get(timeout=1)
            if message_data is None:  # Signal d'arr√™t
                break
                
            channel_id, embed_dict, author_username = message_data
            
            try:
                # R√©cup√©rer le bot depuis le module principal
                from main import bot
                
                if bot and bot.is_ready():
                    channel = bot.get_channel(channel_id)
                    if channel:
                        # Cr√©er l'embed Discord
                        embed = discord.Embed(
                            title=embed_dict.get("title", "Nouveau Cast"),
                            description=embed_dict.get("description", ""),
                            color=embed_dict.get("color", 0x8B5CF6),
                            url=embed_dict.get("url", "")
                        )
                        
                        if embed_dict.get("timestamp"):
                            embed.timestamp = discord.utils.utcnow()
                        if embed_dict.get("footer"):
                            embed.set_footer(text=embed_dict.get("footer", {}).get("text", ""))
                        if embed_dict.get("fields"):
                            for field in embed_dict["fields"]:
                                embed.add_field(
                                    name=field.get("name", ""), 
                                    value=field.get("value", ""), 
                                    inline=field.get("inline", True)
                                )
                        if embed_dict.get("thumbnail"):
                            embed.set_thumbnail(url=embed_dict["thumbnail"]["url"])
                        if embed_dict.get("author"):
                            author_info = embed_dict["author"]
                            embed.set_author(
                                name=author_info.get("name", ""), 
                                url=author_info.get("url", ""), 
                                icon_url=author_info.get("icon_url", "")
                            )
                        
                        # Envoyer le message de mani√®re synchrone
                        channel.send(embed=embed)
                        logger.info(f"‚úÖ Message Discord envoy√© dans {channel.name} pour {author_username}")
                        
                    else:
                        logger.error(f"‚ùå Canal {channel_id} non trouv√©")
                else:
                    logger.warning("‚ö†Ô∏è Bot Discord pas encore pr√™t")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'envoi Discord pour {author_username}: {e}")
                
            finally:
                discord_queue.task_done()
                
        except queue.Empty:
            continue
        except Exception as e:
            logger.error(f"‚ùå Erreur dans le worker Discord: {e}")
            time.sleep(1)

def start_discord_worker():
    """D√©marrer le worker thread Discord"""
    global worker_thread
    if worker_thread is None or not worker_thread.is_alive():
        worker_thread = threading.Thread(target=discord_worker, daemon=True)
        worker_thread.start()
        logger.info("üöÄ Worker Discord d√©marr√©")

def stop_discord_worker():
    """Arr√™ter le worker thread Discord"""
    global worker_running, worker_thread
    worker_running = False
    if worker_thread:
        discord_queue.put(None)  # Signal d'arr√™t
        worker_thread.join(timeout=5)
        logger.info("üõë Worker Discord arr√™t√©")

# D√©marrer le worker au d√©marrage
@app.on_event("startup")
async def startup_event():
    start_discord_worker()

# Arr√™ter le worker √† l'arr√™t
@app.on_event("shutdown")
async def shutdown_event():
    stop_discord_worker()

def verify_signature(request: Request, body: bytes) -> bool:
    """V√©rifier la signature HMAC-SHA512 du webhook Neynar"""
    signature = request.headers.get("X-Neynar-Signature")
    if not signature:
        logger.warning("‚ùå Signature manquante dans les headers")
        return False
    
    logger.info(f"üîê Signature re√ßue: {signature}")
    logger.info(f"üîê Secret utilis√©: {config.NEYNAR_WEBHOOK_SECRET[:10]}...")
    logger.info(f"üîê Body length: {len(body)} bytes")
    
    expected_signature = hmac.new(
        config.NEYNAR_WEBHOOK_SECRET.encode('utf-8'),
        body,
        hashlib.sha512
    ).hexdigest()
    
    logger.info(f"üîê Signature calcul√©e: {expected_signature}")
    is_valid = hmac.compare_digest(signature, expected_signature)
    logger.info(f"üîê Signature valide: {is_valid}")
    
    return is_valid

def build_cast_embed(cast_data: Dict[str, Any], author: Dict[str, Any],
                    embeds: List[Dict], reactions: Dict, replies: Dict, views: Dict) -> Dict[str, Any]:
    """Construire l'embed Discord pour le cast"""
    try:
        username = author.get('username', 'Unknown')
        text = cast_data.get('text', '')
        
        # Construire l'URL du cast
        cast_hash = cast_data.get('hash', '')
        cast_url = f"https://warpcast.com/{username}/{cast_hash}" if cast_hash else ""
        
        # G√©rer les r√©actions
        reaction_counts = []
        if reactions:
            for reaction_type, users in reactions.items():
                if isinstance(users, list):
                    count = len(users)
                    if count > 0:
                        emoji_map = {
                            'like': '‚ù§Ô∏è',
                            'recast': 'üîÑ',
                            'reply': 'üí¨'
                        }
                        emoji = emoji_map.get(reaction_type, 'üëç')
                        reaction_counts.append(f"{emoji} {count}")
        
        # Construire l'embed
        embed = {
            "title": f"@{username} a post√©",
            "description": text[:2000] if len(text) <= 2000 else text[:1997] + "...",
            "color": 0x8B5CF6,
            "url": cast_url,
            "timestamp": discord.utils.utcnow().isoformat(),
            "footer": {"text": "Farcaster Tracker"},
            "author": {
                "name": f"@{username}",
                "url": f"https://warpcast.com/{username}",
                "icon_url": author.get('pfp_url', '')
            }
        }
        
        # Ajouter les r√©actions si disponibles
        if reaction_counts:
            embed["fields"] = [{
                "name": "R√©actions",
                "value": " ".join(reaction_counts),
                "inline": True
            }]
        
        # Ajouter l'image si disponible
        if embeds and len(embeds) > 0:
            first_embed = embeds[0]
            if isinstance(first_embed, dict) and 'url' in first_embed:
                embed["thumbnail"] = {"url": str(first_embed['url'])}
        
        return embed
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la construction de l'embed: {e}")
        return {
            "title": f"@{username} a post√©",
            "description": text[:100] + "..." if len(text) > 100 else text,
            "color": 0xFF0000,
            "footer": {"text": "Erreur lors de la construction de l'embed"}
        }

@app.get("/healthz")
async def health_check():
    """Endpoint de sant√© pour Railway"""
    return {"status": "healthy", "timestamp": discord.utils.utcnow().isoformat()}

@app.get("/webhooks/neynar")
async def webhook_health():
    """Endpoint de sant√© pour Neynar"""
    return {"status": "webhook endpoint ready"}

@app.post("/webhooks/neynar")
async def neynar_webhook(request: Request, db: Session = Depends(get_session_local)):
    """Traiter les webhooks Neynar pour les nouveaux casts"""
    try:
        # Lire le body de la requ√™te
        body = await request.body()
        
        # V√©rifier la signature
        if not verify_signature(request, body):
            raise HTTPException(status_code=401, detail="Signature invalide")
        
        # Parser le JSON
        try:
            data = json.loads(body)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erreur de parsing JSON: {e}")
            raise HTTPException(status_code=400, detail="JSON invalide")
        
        # Log complet de la structure des donn√©es pour debug
        logger.info(f"üîç Structure compl√®te du webhook re√ßue: {json.dumps(data, indent=2)}")
        
        # Extraire les informations du cast selon diff√©rentes structures possibles
        cast_data = None
        author = None
        embeds = []
        reactions = {}
        replies = {}
        views = {}
        
        # Essayer diff√©rentes structures de webhook Neynar
        if 'cast' in data and 'author' in data:
            # Structure: { "cast": {...}, "author": {...} }
            cast_data = data.get('cast', {})
            author = data.get('author', {})
            embeds = data.get('embeds', [])
            reactions = data.get('reactions', {})
            replies = data.get('replies', {})
            views = data.get('views', {})
            logger.info("‚úÖ Structure d√©tect√©e: cast + author s√©par√©s")
            
        elif 'data' in data and 'type' in data:
            # Structure: { "type": "cast.created", "data": {...} }
            if data.get('type') == 'cast.created':
                cast_data = data.get('data', {})
                author = cast_data.get('author', {})
                embeds = cast_data.get('embeds', [])
                reactions = cast_data.get('reactions', {})
                replies = cast_data.get('replies', {})
                views = cast_data.get('views', {})
                logger.info("‚úÖ Structure d√©tect√©e: type cast.created")
            else:
                logger.info(f"‚ÑπÔ∏è Type d'event ignor√©: {data.get('type')}")
                return {"status": "ok", "message": f"Event type ignor√©: {data.get('type')}"}
                
        elif 'cast' in data and 'author' not in data:
            # Structure: { "cast": {...} } avec author dans cast
            cast_data = data.get('cast', {})
            author = cast_data.get('author', {})
            embeds = cast_data.get('embeds', [])
            reactions = cast_data.get('reactions', {})
            replies = cast_data.get('replies', {})
            views = cast_data.get('views', {})
            logger.info("‚úÖ Structure d√©tect√©e: cast avec author inclus")
            
        else:
            # Structure inconnue, essayer de trouver des donn√©es utiles
            logger.warning("‚ö†Ô∏è Structure de webhook inconnue, tentative d'extraction...")
            
            # Chercher des champs qui pourraient contenir des donn√©es de cast
            for key, value in data.items():
                if isinstance(value, dict):
                    if 'text' in value or 'hash' in value:
                        cast_data = value
                        logger.info(f"‚úÖ Cast data trouv√© dans la cl√©: {key}")
                    if 'username' in value or 'fid' in value:
                        author = value
                        logger.info(f"‚úÖ Author trouv√© dans la cl√©: {key}")
                        
            # Si pas trouv√©, essayer de traiter data comme cast_data
            if not cast_data and 'data' in data:
                cast_data = data.get('data', {})
                logger.info("‚úÖ Utilisation de data comme cast_data")
        
        if not cast_data or not author:
            logger.warning(f"‚ö†Ô∏è Donn√©es de cast ou d'auteur manquantes")
            logger.warning(f"üîç Cast data: {cast_data}")
            logger.warning(f"üîç Author: {author}")
            return {"status": "ok", "message": "Donn√©es insuffisantes"}
        
        # Log du cast re√ßu
        cast_text = cast_data.get('text', '')[:50]
        logger.info(f"Cast re√ßu de {author.get('username', 'Unknown')} (FID: {author.get('fid', 'Unknown')}): {cast_text}...")
        
        # Construire l'embed
        embed_dict = build_cast_embed(cast_data, author, embeds, reactions, replies, views)
        logger.info(f"‚úÖ Embed construit avec succ√®s pour {author.get('username', 'Unknown')}")
        
        # R√©cup√©rer les comptes track√©s pour cet auteur
        from database import TrackedAccount
        tracked_accounts = db.query(TrackedAccount).filter(
            TrackedAccount.fid == str(author.get('fid'))
        ).all()
        
        if not tracked_accounts:
            logger.info(f"‚ÑπÔ∏è Aucun compte track√© pour {author.get('username', 'Unknown')}")
            return {"status": "ok", "message": "Aucun compte track√©"}
        
        # V√©rifier si ce cast a d√©j√† √©t√© livr√©
        cast_hash = cast_data.get('hash', '')
        if cast_hash:
            existing_delivery = db.query(Delivery).filter(
                Delivery.cast_hash == cast_hash
            ).first()
            
            if existing_delivery:
                logger.info(f"‚ÑπÔ∏è Cast {cast_hash} d√©j√† livr√©")
                return {"status": "ok", "message": "Cast d√©j√† livr√©"}
        
        # Envoyer les notifications
        sent_count = 0
        for tracked_account in tracked_accounts:
            try:
                # Convertir le channel_id en int de mani√®re s√©curis√©e
                channel_id = int(tracked_account.channel_id)
                
                # Ajouter le message √† la queue Discord
                discord_queue.put((channel_id, embed_dict, author.get('username', 'Unknown')))
                sent_count += 1
                logger.info(f"üì§ Message ajout√© √† la queue pour {author.get('username', 'Unknown')}")
                
            except ValueError as e:
                logger.error(f"‚ùå Erreur de conversion du channel_id '{tracked_account.channel_id}': {e}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'ajout √† la queue pour {author.get('username', 'Unknown')}: {e}")
        
        # Marquer comme livr√© dans la base
        if sent_count > 0 and cast_hash:
            try:
                delivery = Delivery(
                    id=str(uuid.uuid4()),
                    guild_id=tracked_accounts[0].guild_id,
                    channel_id=tracked_accounts[0].channel_id,
                    cast_hash=cast_hash
                )
                db.add(delivery)
                db.commit()
                logger.info(f"‚úÖ Livraison enregistr√©e pour {author.get('username', 'Unknown')}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'enregistrement de la livraison: {e}")
                db.rollback()
        
        logger.info(f"‚úÖ {sent_count} notification(s) ajout√©e(s) √† la queue pour {author.get('username', 'Unknown')}")
        return {"status": "ok", "sent_count": sent_count}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du traitement du webhook: {e}")
        raise HTTPException(status_code=500, detail="Erreur interne")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=config.PORT)
